{"version":3,"sources":["placeholder.png","components/navbar.jsx","components/newTaskBar.jsx","components/task.jsx","components/taskList.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","Navbar","state","react_default","a","createElement","className","src","logo","alt","Component","NewTaskBar","taskTitle","handlerSubmit","e","_this","props","onAddTask","document","getElementById","value","setState","preventDefault","handlerTaskTitleChange","target","onSubmit","this","id","type","placeholder","onChange","maxLength","autoComplete","required","Task","showContainer","onShowContainer","getContainerClass","result","_this2","task","status","title","toUpperCase","defaultChecked","onModifyTask","style","imageSrc","display","onClick","require","TaskList","activeTab","handlerTabs","getHeaderClass","getTasks","tasks","map","components_task","key","filter","length","Fragment","App","handlerAddTask","taskId","push","console","log","handlerModifyTask","Object","toConsumableArray","index","indexOf","objectSpread","navbar","newTaskBar","taskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0a0e36d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.8dfc684e.png\";","import React, { Component } from \"react\";\nimport logo from \"../logo.svg\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <header className=\"header\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </header>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass NewTaskBar extends Component {\n  state = {\n    taskTitle: \"\"\n  };\n\n  handlerSubmit = e => {\n    this.props.onAddTask(this.state.taskTitle);\n    document.getElementById(\"new-task-title\").value = \"\";\n    this.setState({ taskTitle: \"\" });\n    e.preventDefault();\n  };\n\n  handlerTaskTitleChange = e => {\n    this.setState({ taskTitle: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"new-task-container\">\n        <form onSubmit={this.handlerSubmit}>\n          <button className=\"new-task-button plus\" />\n          <input\n            id=\"new-task-title\"\n            type=\"text\"\n            className=\"new-task-input\"\n            placeholder=\"O que precisa ser feito?\"\n            onChange={this.handlerTaskTitleChange}\n            maxLength=\"120\"\n            autoComplete=\"off\"\n            required\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewTaskBar;\n","import React, { Component } from \"react\";\n\nclass Task extends Component {\n  state = {\n    showContainer: false\n  };\n\n  onShowContainer = () => {\n    this.setState({ showContainer: !this.state.showContainer });\n  };\n\n  getContainerClass = () => {\n    let result = \"task-item-hidden-container\";\n    if (this.state.showContainer) {\n      result = \"task-item-shown-container\";\n    }\n    return result;\n  };\n\n  render() {\n    return (\n      <div className=\"task-item-container\">\n        <label\n          className={\n            this.props.task.status == 1\n              ? \"task-item task-item-title-completed\"\n              : \"task-item task-item-title\"\n          }\n        >\n          {this.props.task.title.toUpperCase()}\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.props.task.status}\n            onChange={() => {\n              this.props.onModifyTask(this.props.task);\n            }}\n          />\n          <span className=\"checkmark\" />\n          <button\n            style={this.props.task.imageSrc ? {} : { display: \"none\" }}\n            className=\"task-item-show-button\"\n            onClick={this.onShowContainer}\n          />\n        </label>\n        <div className={this.getContainerClass()}>\n          <img\n            className=\"task-item-image\"\n            src={require(\"../placeholder.png\")}\n            alt=\"\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Task;\n","import React, { Component } from \"react\";\nimport { link } from \"fs\";\nimport Task from \"./task\";\n\nclass TaskList extends Component {\n  state = {\n    activeTab: 1\n  };\n\n  handlerTabs = activeTab => {\n    this.setState({ activeTab });\n  };\n\n  getHeaderClass = () => {\n    let result = \"task-list-header \";\n    switch (this.state.activeTab) {\n      case 1:\n        result += \"task-list-header-first-active\";\n        break;\n      case 2:\n        result += \"task-list-header-second-active\";\n        break;\n      case 3:\n        result += \"task-list-header-third-active\";\n        break;\n      default:\n        break;\n    }\n    return result;\n  };\n\n  getTasks = () => {\n    let result = [];\n    switch (this.state.activeTab) {\n      case 1:\n        result = this.props.tasks.map(task => (\n          <Task\n            key={task.id}\n            task={task}\n            onModifyTask={this.props.onModifyTask}\n          />\n        ));\n        break;\n      case 2:\n        result = this.props.tasks\n          .filter(task => task.status == 0)\n          .map(task => (\n            <Task\n              key={task.id}\n              task={task}\n              onModifyTask={this.props.onModifyTask}\n            />\n          ));\n\n        break;\n      case 3:\n        result = this.props.tasks\n          .filter(task => task.status == 1)\n          .map(task => (\n            <Task\n              key={task.id}\n              task={task}\n              onModifyTask={this.props.onModifyTask}\n            />\n          ));\n        break;\n      default:\n        break;\n    }\n\n    return result.length > 0 ? (\n      result\n    ) : (\n      <p className=\"empty-category\">Você não tem tarefas nesta categoria</p>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className={this.getHeaderClass()}>\n          <button\n            onClick={() => {\n              this.handlerTabs(1);\n            }}\n            className=\"task-list-button task-list-separator\"\n          >\n            TODOS\n          </button>\n          <button\n            onClick={() => {\n              this.handlerTabs(2);\n            }}\n            className=\"task-list-button task-list-separator\"\n          >\n            PENDENTES\n          </button>\n          <button\n            onClick={() => {\n              this.handlerTabs(3);\n            }}\n            className=\"task-list-button\"\n          >\n            FEITOS\n          </button>\n        </div>\n        <div className=\"task-list-body\">{this.getTasks()}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Navbar from \"./components/navbar.jsx\";\nimport NewTaskBar from \"./components/newTaskBar\";\nimport TaskList from \"./components/taskList\";\n\nclass App extends Component {\n  // status: 0 => pending; 1 => completed\n  state = {\n    tasks: [\n      { id: 0, status: 1, title: \"Finalizar desafio de criação\", imageSrc: \"\" },\n      { id: 1, status: 1, title: \"Pensar e analisar\", imageSrc: \"\" },\n      {\n        id: 2,\n        status: 0,\n        title: \"Definir layout e design\",\n        imageSrc: \"./placeholder.png\"\n      },\n      { id: 3, status: 0, title: \"Pesquisar referências\", imageSrc: \"\" },\n      { id: 4, status: 0, title: \"Enviar relatório\", imageSrc: \"\" }\n    ]\n  };\n\n  handlerAddTask = taskTitle => {\n    const tasks = this.state.tasks;\n    const taskId = tasks[tasks.length - 1].id + 1;\n    tasks.push({ id: taskId, status: 0, title: taskTitle, imageSrc: \"\" });\n    this.setState({ tasks });\n\n    console.log(this.state.tasks);\n  };\n\n  handlerModifyTask = task => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.indexOf(task);\n    tasks[index] = { ...task };\n    tasks[index].status = tasks[index].status == 0 ? 1 : 0;\n    this.setState({ tasks });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"background-image\" />\n        <div className=\"background-cover\" />\n        <Navbar />\n        <NewTaskBar onAddTask={this.handlerAddTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          onModifyTask={this.handlerModifyTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.19740d60.svg\";"],"sourceRoot":""}